import{j as e}from"./extends-CwFRzn3r.js";import{useMDXComponents as m}from"./index-DlpNa54Y.js";import{ae as d,af as o,ag as a}from"./index-BGnjr7g7.js";import{G as c,a as l,b as j,c as x,d as h}from"./Grid.stories-CEG8u-Tf.js";import{D as f,F as g,a as n}from"./Feedback-CDPL5_oi.js";import{T as s}from"./text-rUwQV1v4.js";import{C as t}from"./code-BVCI9Byc.js";import"./index-BwDkhjyp.js";import"./_commonjsHelpers-BosuxZz1.js";import"./iframe-CnGWpzHb.js";import"../sb-preview/runtime.js";import"./index-Dn0f7ynd.js";import"./index-D-8MO0q_.js";import"./isNativeReflectConstruct-lfp1ZYuW.js";import"./inheritsLoose-B6jfs0L0.js";import"./setPrototypeOf-DgZC2w_0.js";import"./index-DF3CPj03.js";import"./index-DrFu-skq.js";import"./grid-zpFC2r7C.js";import"./forward-ref-BWI-Phbn.js";import"./factory-CdGA0D9p.js";import"./emotion-styled.browser.esm-NI0tOKWg.js";import"./grid-item-CPObXisN.js";import"./responsive-ClFn5vzN.js";import"./box-B7h7acUJ.js";import"./image-Cz43cXZB.js";import"./use-image-rNdzB_Ea.js";import"./use-safe-layout-effect-BnICyLBj.js";import"./omit-QLD0Eizt.js";import"./simple-grid-CQLrn815.js";import"./use-theme-CBfqdygA.js";import"./hooks-D04p5R0A.js";import"./heading-D_euA-I1.js";import"./use-style-config--HlEOpE-.js";import"./index-CfyPTyT-.js";import"./cx-BDMMs1jM.js";import"./Card-DoxEvc2h.js";import"./providers-tFX8H8_I.js";import"./emotion-react.browser.esm-Hqbkbmab.js";import"./context-CBKykClo.js";import"./calc-Dy10IX1y.js";import"./css-var-DE0-P1bc.js";import"./pick-DBnSFT3T.js";import"./flex-CHlq4-Ax.js";import"./Button-C7Ypcb02.js";import"./button-Db-BlFJ2.js";import"./spinner-DcEBpU52.js";import"./define-styles-BSAHv3yx.js";import"./use-merge-refs-Bdxaq0s4.js";import"./attr-sHTFgF0E.js";import"./center-D672Tu8u.js";import"./h-stack-P6-XT6iQ.js";import"./stack-Crl0JO1i.js";import"./children-2ZXUntH3.js";import"./Icon-BZ-fYLhA.js";/* empty css              */function p(i){const r={a:"a",code:"code",h1:"h1",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...m(),...i.components};return e.jsxs(e.Fragment,{children:[e.jsx(d,{of:c}),`
`,e.jsxs(f,{children:[e.jsx(r.h1,{id:"grid",children:"Grid"}),e.jsx(r.p,{children:`Grid er en layout for å lage grid layouts. Den brukes til å fordele elementer horisontalt eller vertikalt med samme spacing mellom elementene.
Den er lett å bruke for å dynamisk plassere elementer slik du vil. Løsningen er basert på CSS Grid.`}),e.jsx(r.pre,{children:e.jsx(r.code,{className:"language-jsx",children:`import { Grid, GridItem } from "@kvib/react";
`})}),e.jsx(r.p,{children:e.jsx(r.strong,{children:"Egnet til:"})}),e.jsxs(r.ul,{children:[`
`,e.jsx(r.li,{children:"Oppbygging av sidelayout"}),`
`,e.jsx(r.li,{children:"Gruppering av elementer (eks. knapper, cards)"}),`
`]}),e.jsxs(r.p,{children:["Grid er bygget opp av ",e.jsx(r.code,{children:"Grid"})," og ",e.jsx(r.code,{children:"GridItem"}),". ",e.jsx(r.code,{children:"Grid"})," er containeren som definerer layouten, mens ",e.jsx(r.code,{children:"GridItem"})," er elementene som skal plasseres i gridet. For props til ",e.jsx(r.code,{children:"Grid"}),", se nederst på denne siden. For props til ",e.jsx(r.code,{children:"GridItem"}),", se ",e.jsx(r.a,{href:"/story/layout-grid-griditem--grid",children:"GridItem"}),"."]}),e.jsx(g,{component:"Grid"}),e.jsx(n,{title:"Template columns",description:e.jsxs(s,{children:["Grid kan brukes med ",e.jsx(t,{children:"templateColumns"})," for å definere antall kolonner og bredden på hver kolonne. Det er også mulig å bruke ",e.jsx(t,{children:"auto"})," for å definere en kolonne som skal ta opp resten av plassen. Dette er samme oppsett som i CSS Grid.",e.jsx(t,{children:"gap"})," kan brukes for å definere avstanden mellom kolonnene."]}),story:e.jsx(o,{of:l})}),e.jsx(n,{title:"Ta opp flere kolonner eller rader",description:e.jsxs(s,{children:["I noen layouter må man kunne definere at et element skal ta opp flere kolonner eller rader. Dette kan gjøres ved å bruke ",e.jsx(t,{children:"colSpan"})," eller ",e.jsx(t,{children:"rowSpan"})," propene på ",e.jsx(t,{children:"GridItem"}),". I disse tilfellene må også"," ",e.jsx(t,{children:"templateColumns"})," og ",e.jsx(t,{children:"templateRows"})," defineres."]}),story:e.jsx(o,{of:j})}),e.jsx(n,{title:"Start og slutt",description:e.jsxs(s,{children:["Bruk ",e.jsx(t,{children:"colStart"})," og ",e.jsx(t,{children:"colEnd"})," på ",e.jsx(t,{children:"GridItem"})," for å gjøre at elementet starter eller slutter på nth grid posisjon."]}),story:e.jsx(o,{of:x})}),e.jsx(n,{title:"Template areas",description:e.jsxs(s,{children:[e.jsx(t,{children:"templateAreas"}),"-proppen spesifiserer områder inne i gridet. Bruk template literals for å definere områdene. Nå er det mulig å referere til områdene ved å bruke ",e.jsx(t,{children:"area"}),"-proppen på ",e.jsx(t,{children:"GridItem"}),"."]}),story:e.jsx(o,{of:h})}),e.jsx(n,{isVertical:!0,title:"Props",description:"",story:e.jsxs(e.Fragment,{children:[e.jsx(o,{of:l}),e.jsx(a,{of:l})]})})]})]})}function Ge(i={}){const{wrapper:r}={...m(),...i.components};return r?e.jsx(r,{...i,children:e.jsx(p,{...i})}):p(i)}export{Ge as default};
