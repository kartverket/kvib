import{j as l}from"./extends-CwFRzn3r.js";import{u as d,b as f}from"./chunk-DFWC5MHP-TuRmrrLs.js";import{f as i,o as c,c as p,a as u}from"./chunk-ZJJGQIVY-CoI1iMVy.js";import{I as h}from"./chunk-2GBDXOMA-K_WHOyag.js";import{c as v}from"./index-CHDWSgKD.js";import{a as b}from"./chunk-DMO4EI7P-D6u3hnqn.js";import{T as y}from"./chunk-2OOHT3W5-CV6N7GVi.js";var[g,T]=v({name:"FormErrorStylesContext",errorMessage:`useFormErrorStyles returned is 'undefined'. Seems you forgot to wrap the components in "<FormError />" `}),m=i((e,s)=>{const r=b("FormError",e),a=c(e),n=d();return n!=null&&n.isInvalid?l.jsx(g,{value:r,children:l.jsx(p.div,{...n==null?void 0:n.getErrorMessageProps(a,s),className:u("chakra-form__error-message",e.className),__css:{display:"flex",alignItems:"center",...r.text}})}):null});m.displayName="FormErrorMessage";var x=i((e,s)=>{const r=T(),a=d();if(!(a!=null&&a.isInvalid))return null;const n=u("chakra-form__error-icon",e.className);return l.jsx(h,{ref:s,"aria-hidden":!0,...e,__css:r.icon,className:n,children:l.jsx("path",{fill:"currentColor",d:"M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z"})})});x.displayName="FormErrorIcon";const o=i(({helperText:e,children:s,...r},a)=>l.jsxs(f,{...r,ref:a,fontSize:"16px",paddingBottom:"8px",children:[e,s]}));try{o.displayName="FormHelperText",o.__docgenInfo={description:"",displayName:"FormHelperText",props:{htmlTranslate:{defaultValue:null,description:"",name:"htmlTranslate",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"yes"'},{value:'"no"'}]}},helperText:{defaultValue:{value:"helperText"},description:"HelperText for component",name:"helperText",required:!1,type:{name:"string | undefined"}},isRequired:{defaultValue:{value:"false"},description:"If `true`, the form control will be required. This has 2 side effects:\n- The `FormLabel` will show a required indicator\n- The form element (e.g, Input) will have `aria-required` set to `true`",name:"isRequired",required:!1,type:{name:"boolean | undefined"}},isDisabled:{defaultValue:{value:"false"},description:"If `true`, the form control will be disabled. This has 2 side effects:\n- The `FormLabel` will have `data-disabled` attribute\n- The form element (e.g, Input) will be disabled",name:"isDisabled",required:!1,type:{name:"boolean | undefined"}},isInvalid:{defaultValue:{value:"false"},description:"If `true`, the form control will be invalid. This has 2 side effects:\n- The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n- The form element (e.g, Input) will have `aria-invalid` set to `true`",name:"isInvalid",required:!1,type:{name:"boolean | undefined"}},isReadOnly:{defaultValue:{value:"false"},description:"If `true`, the form control will be readonly",name:"isReadOnly",required:!1,type:{name:"boolean | undefined"}},as:{defaultValue:null,description:"",name:"as",required:!1,type:{name:"As | undefined"}}}}}catch{}const t=i(({errorMessage:e,children:s,...r},a)=>l.jsxs(m,{...r,ref:a,background:"red.50",padding:"8px",borderStyle:"solid",borderColor:"red.100",borderWidth:"2px",borderRadius:"8px",gap:"5px",children:[l.jsx("span",{className:"material-symbols-outlined",children:"Error"}),l.jsxs(y,{children:[e,s]})]}));try{t.displayName="FormErrorMessage",t.__docgenInfo={description:"",displayName:"FormErrorMessage",props:{htmlTranslate:{defaultValue:null,description:"",name:"htmlTranslate",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"yes"'},{value:'"no"'}]}},errorMessage:{defaultValue:{value:"errorMessage"},description:"errorMessage for component",name:"errorMessage",required:!1,type:{name:"string | undefined"}},isRequired:{defaultValue:{value:"false"},description:"If `true`, the form control will be required. This has 2 side effects:\n- The `FormLabel` will show a required indicator\n- The form element (e.g, Input) will have `aria-required` set to `true`",name:"isRequired",required:!1,type:{name:"boolean | undefined"}},isDisabled:{defaultValue:{value:"false"},description:"If `true`, the form control will be disabled. This has 2 side effects:\n- The `FormLabel` will have `data-disabled` attribute\n- The form element (e.g, Input) will be disabled",name:"isDisabled",required:!1,type:{name:"boolean | undefined"}},isInvalid:{defaultValue:{value:"false"},description:"If `true`, the form control will be invalid. This has 2 side effects:\n- The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n- The form element (e.g, Input) will have `aria-invalid` set to `true`",name:"isInvalid",required:!1,type:{name:"boolean | undefined"}},isReadOnly:{defaultValue:{value:"false"},description:"If `true`, the form control will be readonly",name:"isReadOnly",required:!1,type:{name:"boolean | undefined"}},as:{defaultValue:null,description:"",name:"as",required:!1,type:{name:"As | undefined"}}}}}catch{}export{o as F,t as a};
