var u,i=new Map,p=t=>t.getBoundingClientRect();function v(t,e){const{scope:l="rect",getRect:s=p,onChange:o}=e,a=E({scope:l,getRect:s}),n=i.get(t);return n?(n.callbacks.push(o),o(s(t))):(i.set(t,{rect:{},callbacks:[o]}),i.size===1&&(u=requestAnimationFrame(a))),function(){const c=i.get(t);if(!c)return;const f=c.callbacks.indexOf(o);f>-1&&c.callbacks.splice(f,1),c.callbacks.length===0&&(i.delete(t),i.size===0&&cancelAnimationFrame(u))}}function E(t){const{scope:e,getRect:l}=t,s=m(e);return function o(){const a=[];i.forEach((n,r)=>{const c=l(r);s(n.rect,c)||(n.rect=c,a.push(n))}),a.forEach(n=>{n.callbacks.forEach(r=>r(n.rect))}),u=requestAnimationFrame(o)}}var g=(t,e)=>t.width===e.width&&t.height===e.height,h=(t,e)=>t.top===e.top&&t.left===e.left,d=(t,e)=>g(t,e)&&h(t,e);function m(t){return t==="size"?g:t==="position"?h:d}export{v as t};
