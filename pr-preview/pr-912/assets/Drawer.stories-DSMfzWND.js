import{j as e}from"./jsx-runtime-sfY7k0Xq.js";import{D as h,c as D,d as x,e as v,f as C,g as k,h as P,i as j,u as O,j as F,k as T,l as B,m as I}from"./index-C6ntkiuU.js";import{C as S}from"./close-button-C8_g2cP4.js";import{r as f}from"./index-CcKhGcwW.js";import{P as E}from"./portal-B_Lxu86P.js";import{B as s}from"./Button-8mFyd5UY.js";import{I as R}from"./Input-C8FXr1bD.js";const V=f.forwardRef(function(t,a){const{children:l,portalled:w=!0,portalRef:y,offset:b,...g}=t;return e.jsx(E,{disabled:!w,container:y,children:e.jsx(h,{padding:b,children:e.jsx(D,{ref:a,...g,asChild:!1,children:l})})})});f.forwardRef(function(t,a){return e.jsx(x,{position:"absolute",top:"2",insetEnd:"2",...t,asChild:!0,children:e.jsx(S,{size:"sm",ref:a})})});const A=v,$=C,z=k,H=P,_=j,L={title:"Komponenter/Drawer",component:A,parameters:{docs:{story:{inline:!0},canvas:{sourceState:"shown"}}},argTypes:{isOpen:{description:"If true, the modal will be open.",table:{type:{summary:"boolean"}},control:"boolean"},onClose:{description:"Callback invoked to close the modal.",table:{type:{summary:"() => void"}},control:"text"},allowPinchZoom:{description:"Handle zoom/pinch gestures on iOS devices when scroll locking is enabled.",table:{type:{summary:"boolean"},defaultValue:{summary:"false"}},control:"boolean"},autoFocus:{description:"If true, the modal will autofocus the first enabled and interactive element within the ModalContent",table:{type:{summary:"boolean"},defaultValue:{summary:"true"}},control:"boolean"},blockScrollOnMount:{description:"If true, scrolling will be disabled on the body when the modal opens.",table:{type:{summary:"boolean"},defaultValue:{summary:"true"}},control:"boolean"},closeOnEsc:{description:"If true, the modal will close when the Esc key is pressed",table:{type:{summary:"boolean"},defaultValue:{summary:"true"}},control:"boolean"},closeOnOverlayClick:{description:"f true, the modal will close when the overlay is clicked",table:{type:{summary:"boolean"},defaultValue:{summary:"true"}},control:"boolean"},finalFocusRef:{description:"The ref of element to receive focus when the modal closes.",table:{type:{summary:"RefObject<FocusableElement>"}},control:"text"},id:{description:"The id of the modal",table:{type:{summary:"String"}},control:"text"},initialFocusRef:{description:"The ref of element to receive focus when the modal opens.",table:{type:{summary:"RefObject<FocusableElement>"}},control:"text"},isFullHeight:{description:"If true and drawer's placement is top or bottom, the drawer will occupy the viewport height (100vh)",table:{type:{summary:"boolean"}},control:"boolean"},lockFocusAcrossFrames:{description:"Enables aggressive focus capturing within iframes. - If true: keep focus in the lock, no matter where lock is active - If false: allows focus to move outside of iframe",table:{type:{summary:"boolean"},defaultValue:{summary:"false"}},control:"boolean"},onCloseComplete:{description:"Fires when all exiting nodes have completed animating out",table:{type:{summary:"() => void"}},control:"text"},onEsc:{description:"Callback fired when the escape key is pressed and focus is within modal",table:{type:{summary:"() => void"}},control:"text"},onOverlayClick:{description:"Callback fired when the overlay is clicked.",table:{type:{summary:"() => void"}},control:"text"},placement:{description:"The placement of the drawer",table:{type:{summary:"SlideDirection | LogicalPlacement"},defaultValue:{summary:"right"}},control:"text"},portalProps:{description:"Props to be forwarded to the portal component",table:{type:{summary:'Pick< PortalProps, "appendToParentPortal" | "containerRef" >'}},control:"text"},preserveScrollBarGap:{description:"If true, a `padding-right` will be applied to the body element that's equal to the width of the scrollbar. This can help prevent some unpleasant flickering effect and content adjustment when the modal opens",table:{type:{summary:"boolean"},defaultValue:{summary:"true"}},control:"boolean"},returnFocusOnClose:{description:"If true, the modal will return focus to the element that triggered it when it closes.",table:{type:{summary:"boolean"},defaultValue:{summary:"true"}},control:"boolean"},size:{description:"Size of the Drawer",table:{type:{summary:"xs | sm | md | lg | xl | full"},defaultValue:{summary:"xs"}},options:["xs","sm","md","lg","xl","full"],control:{type:"radio"}},trapFocus:{description:"If false, focus lock will be disabled completely. This is useful in situations where you still need to interact with other surrounding elements. ðŸš¨Warning: We don't recommend doing this because it hurts the accessibility of the modal, based on WAI-ARIA specifications.",table:{type:{summary:"boolean"},defaultValue:{summary:"true"}},control:"boolean"},useInert:{description:"A11y: If true, the siblings of the modal will have `aria-hidden` set to true so that screen readers can only see the modal. This is commonly known as making the other elements **inert**",table:{type:{summary:"boolean"},defaultValue:{summary:"true"}},control:"boolean"}},args:{allowPinchZoom:!1,autoFocus:!0,blockScrollOnMount:!0,closeOnEsc:!0,closeOnOverlayClick:!0,lockFocusAcrossFrames:!1,placement:"right",preserveScrollBarGap:!0,returnFocusOnClose:!0,size:"xs",trapFocus:!0,useInert:!0,onOverlayClick:void 0,onClose:void 0,onCloseComplete:void 0,onEsc:void 0}},r=({...o})=>{const{open:t,onOpen:a,onClose:l}=O();return e.jsxs(F,{...o,open:t,onClose:l,children:[e.jsx(_,{}),e.jsx(s,{as:T,colorPalette:o.colorPalette,onClick:a,children:"Ã…pne"}),e.jsx(h,{children:e.jsxs(V,{children:[e.jsx(B,{}),e.jsx(z,{children:e.jsx(I,{children:"Lag din konto"})}),e.jsx(H,{children:e.jsx(R,{placeholder:"Skriv her..."})}),e.jsxs($,{children:[e.jsx(s,{colorPalette:o.colorPalette,variant:"secondary",mr:3,onClick:l,children:"Avbryt"}),e.jsx(s,{colorPalette:o.colorPalette,children:"Lagre"})]})]})})]})},n={render:o=>e.jsx(r,{...o})};var i,c,u;r.parameters={...r.parameters,docs:{...(i=r.parameters)==null?void 0:i.docs,source:{originalSource:`({
  ...args
}) => {
  const {
    open,
    onOpen,
    onClose
  } = useDisclosure();
  return <Drawer {...args} open={open} onClose={onClose}>
      <DrawerBackdrop />
      <Button as={DrawerTrigger} colorPalette={args.colorPalette} onClick={onOpen}>
        Ã…pne
      </Button>
      <DrawerPositioner>
        <DrawerContent>
          <DrawerCloseTrigger />
          <DrawerHeader>
            <DrawerTitle>Lag din konto</DrawerTitle>
          </DrawerHeader>

          <DrawerBody>
            <Input placeholder="Skriv her..." />
          </DrawerBody>

          <DrawerFooter>
            <Button colorPalette={args.colorPalette} variant="secondary" mr={3} onClick={onClose}>
              Avbryt
            </Button>
            <Button colorPalette={args.colorPalette}>Lagre</Button>
          </DrawerFooter>
        </DrawerContent>
      </DrawerPositioner>
    </Drawer>;
}`,...(u=(c=r.parameters)==null?void 0:c.docs)==null?void 0:u.source}}};var d,m,p;n.parameters={...n.parameters,docs:{...(d=n.parameters)==null?void 0:d.docs,source:{originalSource:`{
  render: (args: DrawerProps) => <DrawerExample {...args} />
}`,...(p=(m=n.parameters)==null?void 0:m.docs)==null?void 0:p.source}}};const M=["DrawerExample","Preview"],Q=Object.freeze(Object.defineProperty({__proto__:null,DrawerExample:r,Preview:n,__namedExportsOrder:M,default:L},Symbol.toStringTag,{value:"Module"}));export{Q as D,n as P};
