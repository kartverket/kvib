import{j as s}from"./jsx-runtime-CQsLhzk5.js";import"./slider-Bgj0f888.js";import{r as c}from"./index-Wp2u197Z.js";import{A as _}from"./react-select-async.esm-D1RP8hg7.js";import{T as p}from"./text-CqjT0fSu.js";function F(e){return c.forwardRef(e)}const j=({loadOptions:e,onChange:a,placeholder:t,debounceTime:o,autoFocus:i,className:l,clearable:h=!0,dropdownIndicator:d,defaultOptions:g,id:v,multi:m=!1,noOptionsMessage:V,disabled:w,menuPlacement:T="bottom",value:S,optionLabelFormatter:O},x)=>{const M=({inputValue:r})=>r.replaceAll(/\s/g,"").length<1?null:s.jsx(p,{children:"Fant ingen resultater"}),q=D(e,o),A=(r,C)=>{m?a(r,C):a(r)};return s.jsx(_,{components:{DropdownIndicator:()=>d??null,...d?{}:{IndicatorSeparator:()=>null}},formatOptionLabel:O,isClearable:h,autoFocus:i,className:l||"",onChange:A,noOptionsMessage:V||M,loadingMessage:()=>s.jsx(p,{children:"Laster..."}),loadOptions:o?q:e,blurInputOnSelect:!1,placeholder:t||"SÃ¸k her...",defaultOptions:g,id:v,isMulti:m,isDisabled:w,menuPlacement:T,value:S,ref:x})},u=F(j),D=(e,a=300)=>{const t=c.useRef();return c.useEffect(()=>()=>{t.current&&clearTimeout(t.current)},[]),(o,i)=>{const l=setTimeout(()=>e(o,i),a);clearTimeout(t.current),t.current=l}};try{u.displayName="SearchAsync",u.__docgenInfo={description:"",displayName:"SearchAsync",props:{loadOptions:{defaultValue:null,description:"Function to fetch/select options based on input.",name:"loadOptions",required:!0,type:{name:"(inputValue: string, callback: (options: T[]) => void) => void"}},placeholder:{defaultValue:null,description:"Placeholder text for the input field.",name:"placeholder",required:!1,type:{name:"string"}},autoFocus:{defaultValue:null,description:"Determines if the input is focused on mount.",name:"autoFocus",required:!1,type:{name:"boolean"}},debounceTime:{defaultValue:null,description:"Time delay (ms) before invoking `loadOptions`.",name:"debounceTime",required:!1,type:{name:"number"}},className:{defaultValue:null,description:"Additional CSS class for the component.",name:"className",required:!1,type:{name:"string"}},clearable:{defaultValue:{value:"true"},description:"Allows a clear button in the input.",name:"clearable",required:!1,type:{name:"boolean"}},dropdownIndicator:{defaultValue:null,description:"Custom JSX for the dropdown indicator.",name:"dropdownIndicator",required:!1,type:{name:"Element"}},defaultOptions:{defaultValue:null,description:"Default options shown when no input is given. If true, all options will be shown.",name:"defaultOptions",required:!1,type:{name:"boolean | T[]"}},id:{defaultValue:null,description:"Id set to the SelectContainer component",name:"id",required:!1,type:{name:"string"}},disabled:{defaultValue:null,description:"Determines if the input is disabled",name:"disabled",required:!1,type:{name:"boolean"}},focusBorderColor:{defaultValue:null,description:"Determines the color of the border when focused. Use color keys in `theme.colors`.",name:"focusBorderColor",required:!1,type:{name:"string"}},noOptionsMessage:{defaultValue:null,description:"Function to map inputValue to a text output when no options are loaded",name:"noOptionsMessage",required:!1,type:{name:"((obj: { inputValue: string; }) => ReactNode)"}},menuPlacement:{defaultValue:{value:"bottom"},description:"Default placement of the menu in relation to the control. 'auto' will flip when there isn't enough space below the control.",name:"menuPlacement",required:!1,type:{name:"enum",value:[{value:'"bottom"'},{value:'"top"'},{value:'"auto"'}]}},value:{defaultValue:null,description:"Variable to override the selected value of the component. Null resets the component and undefined  is ignored. When in use update value from the onChange function",name:"value",required:!1,type:{name:"unknown"}},optionLabelFormatter:{defaultValue:null,description:"Function for formatting the labels in the dropdown menu",name:"optionLabelFormatter",required:!1,type:{name:"((data: T, formatOptionLabelMeta: FormatOptionLabelMeta<T>) => ReactNode)"}},ref:{defaultValue:null,description:"Reference to the instance of the select element. Note that this is not a default HTMLSelectElement, but a class from the react-select package. As such, the\ntype must be imported from KVIB.\nAllows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null`\n(or call the ref with `null` if you passed a callback ref).\n@see {@link https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom React Docs}",name:"ref",required:!1,type:{name:"((((instance: SearchAsyncElement<T> | null) => void) | RefObject<SearchAsyncElement<T>>) & (string | ((instance: SelectInstance<...> | null) => void) | RefObject<...>)) | null"}},multi:{defaultValue:{value:"false"},description:"Determines if it is possible to choose several values.",name:"multi",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:"Callback for when the selection changes. If `isMulti=true` the type is `(newValue: readonly T[] | null, actionMeta: ActionMeta<T>) => void`\nIf `isMulti=false`, the type is `(newValue: T | null) => void`",name:"onChange",required:!0,type:{name:"((newValue: readonly T[] | null, actionMeta: ActionMeta<T>) => void) | ((newValue: T | null) => void)"}}}}}catch{}const I={title:"Komponenter/Search Async",component:u,parameters:{docs:{story:{inline:!0},canvas:{sourceState:"hidden"}},a11y:{disable:!0}},argTypes:{loadOptions:{control:"text"},onChange:{table:{type:{summary:"(newValue: T | null) => void"}},control:"text"},placeholder:{table:{type:{summary:"string"}},control:"text"},autoFocus:{table:{type:{summary:"boolean"}},control:"boolean"},debounceTime:{table:{type:{summary:"number"}},control:"number"},className:{table:{type:{summary:"string"}},control:"text"},clearable:{table:{type:{summary:"boolean"}},control:"boolean"},dropdownIndicator:{table:{type:{summary:"Element"}},control:"text"},size:{table:{type:{summary:"sm | md | lg"},defaultValue:{summary:"md"}},options:["sm","md","lg"],control:{type:"radio"}},defaultOptions:{table:{type:{summary:"T[] | boolean"}}},variant:{table:{type:{summary:"outline | filled | flushed | unstyled"},defaultValue:{summary:"outline"}},options:["outline","filled","flushed","unstyled"],control:{type:"radio"}},id:{table:{type:{summary:"string"}},control:"text"},multi:{table:{type:{summary:"boolean"},defualtValue:{summary:"false"}},control:"boolean"},noOptionsMessage:{table:{type:{summary:"(obj: { inputValue: string; }) => ReactNode"}},control:"text"},optionLabelFormatter:{table:{type:{summary:"(data: T, formatOptionLabelMeta: FormatOptionLabelMeta<T>) => ReactNode"}},control:"text"},disabled:{table:{type:{summary:"boolean"},defaultValue:{summary:"false"}},control:"boolean"},focusBorderColor:{table:{type:{summary:"string"},defaultValue:{summary:"blue.500"}},control:"text"},menuPlacement:{table:{type:{summary:"bottom | top | auto"},defaultValue:{summary:"bottom"}},options:["bottom","top","auto"],control:{type:"radio"}}},args:{onChange:void 0,loadOptions:void 0}},n={parameters:{docs:{canvas:{sourceState:"shown"}}},render:e=>s.jsx(u,{...e})};var f,y,b;n.parameters={...n.parameters,docs:{...(f=n.parameters)==null?void 0:f.docs,source:{originalSource:`{
  parameters: {
    docs: {
      canvas: {
        sourceState: "shown"
      }
    }
  },
  render: args => <KvibSearchAsync {...args} />
}`,...(b=(y=n.parameters)==null?void 0:y.docs)==null?void 0:b.source}}};const N=["Preview"],K=Object.freeze(Object.defineProperty({__proto__:null,Preview:n,__namedExportsOrder:N,default:I},Symbol.toStringTag,{value:"Module"}));export{n as P,K as S};
