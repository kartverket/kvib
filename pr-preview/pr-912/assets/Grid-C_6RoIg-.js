import{j as e}from"./jsx-runtime-CQsLhzk5.js";import{useMDXComponents as a}from"./index-C2WH5l5l.js";import{ae as p,af as i,ag as m}from"./index-BlmlmL0R.js";import{D as c,F as j,a as s}from"./Feedback-Ddcknu-S.js";import{G as x,P as l,a as h,b as f,c as g}from"./Grid.stories-CHQoqNJP.js";import{T as o}from"./text-DjVM_lrW.js";import{C as t}from"./code-ztxGxAub.js";import"./index-Wp2u197Z.js";import"./iframe-BbN5QSD-.js";import"../sb-preview/runtime.js";import"./index-C2tM1_0x.js";import"./index-yiGAEVS0.js";import"./index-DrFu-skq.js";import"./box-BV7_-RZx.js";import"./factory-DbxLU_Fv.js";import"./image-CQDJLaH5.js";import"./simple-grid-Bsi4EGdg.js";import"./walk-object-MOVJDcbI.js";import"./is-D1VN0Vzs.js";import"./grid-D5vdwI11.js";import"./heading-CoXJvVOu.js";import"./create-recipe-context-uxbFyZx7.js";import"./empty-DSVal0bC.js";import"./use-recipe-Bg1t1VCq.js";import"./card-CN8xBwHc.js";import"./create-slot-recipe-context-Ct7AJ-u_.js";import"./flex-lNX0IHYU.js";import"./Link-BrjUlTjh.js";import"./link-BIDHNzfj.js";import"./grid-item-B6vdGgFE.js";function d(n){const r={a:"a",code:"code",h1:"h1",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...a(),...n.components};return e.jsxs(e.Fragment,{children:[e.jsx(p,{of:x}),`
`,e.jsxs(c,{children:[e.jsx(r.h1,{id:"grid",children:"Grid"}),e.jsx(r.p,{children:`Grid er en layout for å lage grid layouts. Den brukes til å fordele elementer horisontalt eller vertikalt med samme spacing mellom elementene.
Den er lett å bruke for å dynamisk plassere elementer slik du vil. Løsningen er basert på CSS Grid.`}),e.jsx(r.pre,{children:e.jsx(r.code,{className:"language-jsx",children:`import { Grid, GridItem } from "@kvib/react";
`})}),e.jsx(r.p,{children:e.jsx(r.strong,{children:"Egnet til:"})}),e.jsxs(r.ul,{children:[`
`,e.jsx(r.li,{children:"Oppbygging av sidelayout"}),`
`,e.jsx(r.li,{children:"Gruppering av elementer (eks. knapper, cards)"}),`
`]}),e.jsxs(r.p,{children:["Grid er bygget opp av ",e.jsx(r.code,{children:"Grid"})," og ",e.jsx(r.code,{children:"GridItem"}),". ",e.jsx(r.code,{children:"Grid"})," er containeren som definerer layouten, mens ",e.jsx(r.code,{children:"GridItem"})," er elementene som skal plasseres i gridet. For props til ",e.jsx(r.code,{children:"Grid"}),", se nederst på denne siden. For props til ",e.jsx(r.code,{children:"GridItem"}),", se ",e.jsx(r.a,{href:"/story/layout-grid-griditem--grid",children:"GridItem"}),"."]}),e.jsx(j,{component:"Grid"}),e.jsx(s,{title:"Template columns",description:e.jsxs(o,{children:["Grid kan brukes med ",e.jsx(t,{children:"templateColumns"})," for å definere antall kolonner og bredden på hver kolonne. Det er også mulig å bruke ",e.jsx(t,{children:"auto"})," for å definere en kolonne som skal ta opp resten av plassen. Dette er samme oppsett som i CSS Grid.",e.jsx(t,{children:"gap"})," kan brukes for å definere avstanden mellom kolonnene."]}),story:e.jsx(i,{of:l})}),e.jsx(s,{title:"Ta opp flere kolonner eller rader",description:e.jsxs(o,{children:["I noen layouter må man kunne definere at et element skal ta opp flere kolonner eller rader. Dette kan gjøres ved å bruke ",e.jsx(t,{children:"colSpan"})," eller ",e.jsx(t,{children:"rowSpan"})," propene på ",e.jsx(t,{children:"GridItem"}),". I disse tilfellene må også"," ",e.jsx(t,{children:"templateColumns"})," og ",e.jsx(t,{children:"templateRows"})," defineres."]}),story:e.jsx(i,{of:h})}),e.jsx(s,{title:"Start og slutt",description:e.jsxs(o,{children:["Bruk ",e.jsx(t,{children:"colStart"})," og ",e.jsx(t,{children:"colEnd"})," på ",e.jsx(t,{children:"GridItem"})," for å gjøre at elementet starter eller slutter på nth grid posisjon."]}),story:e.jsx(i,{of:f})}),e.jsx(s,{title:"Template areas",description:e.jsxs(o,{children:[e.jsx(t,{children:"templateAreas"}),"-proppen spesifiserer områder inne i gridet. Bruk template literals for å definere områdene. Nå er det mulig å referere til områdene ved å bruke ",e.jsx(t,{children:"area"}),"-proppen på ",e.jsx(t,{children:"GridItem"}),"."]}),story:e.jsx(i,{of:g})}),e.jsx(s,{isVertical:!0,title:"Props",description:"",story:e.jsxs(e.Fragment,{children:[e.jsx(i,{of:l}),e.jsx(m,{of:l})]})})]})]})}function Q(n={}){const{wrapper:r}={...a(),...n.components};return r?e.jsx(r,{...n,children:e.jsx(d,{...n})}):d(n)}export{Q as default};
