import{j as e}from"./jsx-runtime-sfY7k0Xq.js";import{r as b}from"./index-CcKhGcwW.js";import{G as f}from"./group-DiEFhqFk.js";import{P as h,a as P,b as I,c as g}from"./pin-input-BpeivvAO.js";const i=b.forwardRef(function(l,u){const{count:p=4,inputProps:m,rootRef:d,attached:c,...y}=l;return e.jsxs(h,{ref:d,...y,children:[e.jsx(P,{ref:u,...m}),e.jsx(I,{children:e.jsx(f,{attached:c,children:Array.from({length:p}).map((v,n)=>e.jsx(g,{index:n},n))})})]})}),x={title:"Komponenter/Pin Input",component:i,parameters:{docs:{story:{inline:!0},canvas:{sourceState:"shown"}},a11y:{disable:!0}},argTypes:{manageFocus:{description:"If true, focus will move automatically to the next input once filled",table:{type:{summary:"boolean"},defaultValue:{summary:"true"}},control:"boolean"},mask:{description:"If true, the input's value will be masked just like `type=password`",table:{type:{summary:"boolean"}},control:"boolean"},otp:{description:'If true, the pin input component signals to its fields that they should use `autocomplete="one-time-code"`.',table:{type:{summary:"boolean"}},control:"boolean"},type:{description:"The type of values the pin-input should allow",table:{type:{summary:'"number" | "alphanumeric"'}},options:["number","alphanumeric"],control:{type:"radio"}},size:{description:"Size of input",table:{type:{summary:"lg | md | sm | xs"},defaultValue:{summary:"md"}},options:["lg","md","sm","xs"],control:{type:"radio"}},variant:{description:"Variant",table:{type:{summary:"outline | filled | flushed | unstyled"},defaultValue:{summary:"outline"}},options:["outline","filled","flushed","unstyled"],control:{type:"radio"}},isInvalid:{description:"Toggles if input should be invalid",table:{type:{summary:"boolean"}},control:"boolean"},isDisabled:{description:"Toggles if input should be disabled",table:{type:{summary:"boolean"}},control:"boolean"}}},t={render:o=>e.jsx(i,{...o})};var r,a,s;t.parameters={...t.parameters,docs:{...(r=t.parameters)==null?void 0:r.docs,source:{originalSource:`{
  render: (args: PinInputProps) => <KvibPinInput {...args} />
}`,...(s=(a=t.parameters)==null?void 0:a.docs)==null?void 0:s.source}}};const j=["Preview"],R=Object.freeze(Object.defineProperty({__proto__:null,Preview:t,__namedExportsOrder:j,default:x},Symbol.toStringTag,{value:"Module"}));export{R as P,t as a};
