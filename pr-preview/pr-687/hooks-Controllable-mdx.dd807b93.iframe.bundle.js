"use strict";(self.webpackChunk_kvib_storybook=self.webpackChunk_kvib_storybook||[]).push([[3165],{"./stories/hooks/Controllable.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>Controllable});var react=__webpack_require__("../../node_modules/react/index.js"),jsx_runtime=__webpack_require__("../../node_modules/react/jsx-runtime.js"),lib=__webpack_require__("../../node_modules/@mdx-js/react/lib/index.js"),dist=__webpack_require__("../../node_modules/@storybook/addon-docs/dist/index.mjs"),templates=__webpack_require__("./stories/templates/index.ts"),blocks_dist=__webpack_require__("../../node_modules/@storybook/blocks/dist/index.mjs"),chunk_7JSBRQFI=__webpack_require__("../../node_modules/@chakra-ui/hooks/dist/chunk-7JSBRQFI.mjs"),react_dist=__webpack_require__("../../packages/react/dist/index.mjs"),chunk_PULVB27S=__webpack_require__("../../node_modules/@chakra-ui/layout/dist/chunk-PULVB27S.mjs");const UnControllableExample=()=>{const[value,setValue]=(0,chunk_7JSBRQFI.T)({defaultValue:40});return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)(react_dist.zxk,{onClick:()=>setValue(value+1),children:"+"}),(0,jsx_runtime.jsx)(chunk_PULVB27S.xu,{as:"span",w:"200px",mx:"24px",children:value}),(0,jsx_runtime.jsx)(react_dist.zxk,{onClick:()=>setValue(value-1),children:"-"})]})};UnControllableExample.displayName="UnControllableExample";const ControllableExample=()=>{const[value,setValue]=react.useState(40),[internalValue,setInternalValue]=(0,chunk_7JSBRQFI.T)({value,onChange:setValue});return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)(react_dist.zxk,{onClick:()=>setInternalValue(value+1),children:"+"}),(0,jsx_runtime.jsx)(chunk_PULVB27S.xu,{as:"span",w:"200px",mx:"24px",children:internalValue}),(0,jsx_runtime.jsx)(react_dist.zxk,{onClick:()=>setInternalValue(value-1),children:"-"})]})};ControllableExample.displayName="ControllableExample";const UnControllableStrings="function Example() {\n  const [value, setValue] = useControllableState({ defaultValue: 40 })\n  return (\n    <div>\n      <Button onClick={() => setValue(value + 1)}>+</Button>\n      <Box as='span' w='200px' mx='24px'>\n        {value}\n      </Box>\n      <Button onClick={() => setValue(value - 1)}>-</Button>\n    </div>\n  )\n}",ControllableStrings="function Example() {\n  // you need a state and updater to change the value\n  const [value, setValue] = React.useState(40)\n\n  const [internalValue, setInternalValue] = useControllableState({\n    value,\n    onChange: setValue,\n  })\n\n  return (\n    <div>\n      <Button onClick={() => setInternalValue(value + 1)}>+</Button>\n      <Box as='span' w='200px' mx='24px'>\n        {internalValue}\n      </Box>\n      <Button onClick={() => setInternalValue(value - 1)}>-</Button>\n    </div>\n  )\n}";function _createMdxContent(props){const _components=Object.assign({h1:"h1",p:"p",strong:"strong",pre:"pre",code:"code",h2:"h2",ul:"ul",li:"li",h3:"h3"},(0,lib.ah)(),props.components);return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(dist.h_,{title:"Hooks/useControllable"}),"\n",(0,jsx_runtime.jsx)(_components.h1,{id:"usecontrollable",children:"useControllable"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:[(0,jsx_runtime.jsx)(_components.strong,{children:"useControllable"})," React-hook som lar hvilken som helst komponent håndtere kontrollerte og ukontrollerte modi, og gir kontroll over sin interne tilstand.\nDe fleste Chakra-komponentene bruker useControllableState for sømløst å håndtere både kontrollerte og ukontrollerte tilstandsscenarioer."]}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-jsx",children:'import { useControllable } from "@kvib/react";\n'})}),"\n",(0,jsx_runtime.jsx)(templates.x2,{component:"useControllable"}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"usecontrollableprop",children:"useControllableProp"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["Gitt en egenskapsverdi (prop value) og en tilstandsverdi (state value), brukes ",(0,jsx_runtime.jsx)(_components.strong,{children:"useControllableProp"}),"-hooken til å avgjøre om en komponent er kontrollert eller ukontrollert, og returnerer også den beregnede verdien."]}),"\n",(0,jsx_runtime.jsxs)(_components.ul,{children:["\n",(0,jsx_runtime.jsx)(_components.li,{children:"Den returnerer egenskapsverdien hvis komponenten er kontrollert."}),"\n",(0,jsx_runtime.jsx)(_components.li,{children:"Den returnerer tilstandsverdien hvis komponenten er ukontrollert."}),"\n"]}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"bruk",children:"Bruk"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-jsx",children:"const [isControlled, value] = useControllableProp(propValue, stateValue)\n"})}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"usecontrollablestate",children:"useControllableState"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:[(0,jsx_runtime.jsx)(_components.strong,{children:"useControllableState"})," returnerer tilstanden og funksjonen som oppdaterer tilstanden, akkurat som ",(0,jsx_runtime.jsx)(_components.strong,{children:"React.useState"})," gjør."]}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-jsx",children:"const [value, setValue] = useControllableState(options)\n"})}),"\n",(0,jsx_runtime.jsxs)(templates.Zu,{children:[(0,jsx_runtime.jsx)(_components.h3,{id:"bruk-1",children:"Bruk"}),(0,jsx_runtime.jsx)(templates.Z$,{title:"",description:"Med useControllableState kan du sende en initiell tilstand (ved å bruke defaultValue), som antyder at komponenten er ukontrollert, eller du kan sende en kontrollert verdi (ved å bruke value), som antyder at komponenten er kontrollert.\nHer er et eksempel på en ukontrollert tilstand:",isVertical:!0,story:(0,jsx_runtime.jsxs)(blocks_dist.Xz,{children:[(0,jsx_runtime.jsx)(UnControllableExample,{}),(0,jsx_runtime.jsx)(blocks_dist.Hw,{code:UnControllableStrings,dark:!0})]})}),(0,jsx_runtime.jsx)(templates.Z$,{title:"",description:"Her er et eksempel på en kontrollert tilstand:",isVertical:!0,story:(0,jsx_runtime.jsxs)(blocks_dist.Xz,{children:[(0,jsx_runtime.jsx)(ControllableExample,{}),(0,jsx_runtime.jsx)(blocks_dist.Hw,{code:ControllableStrings,dark:!0})]})})]}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"kontekstuell-tilbakemelding-og-tilstand-oppdateringer",children:"Kontekstuell tilbakemelding og Tilstand-oppdateringer"}),"\n",(0,jsx_runtime.jsx)(_components.p,{children:"Dette hooket gir nyttige feil- eller advarselmeldinger når du bytter mellom kontrollerte og ukontrollerte moduser, eller når du prøver å oppdatere den sendte defaultValue."})]})}const Controllable=function MDXContent(props={}){const{wrapper:MDXLayout}=Object.assign({},(0,lib.ah)(),props.components);return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,Object.assign({},props,{children:(0,jsx_runtime.jsx)(_createMdxContent,props)})):_createMdxContent(props)}}}]);