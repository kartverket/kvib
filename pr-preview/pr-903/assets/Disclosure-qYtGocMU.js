import{j as e}from"./extends-CwFRzn3r.js";import{useMDXComponents as m}from"./index-DlpNa54Y.js";import"./chunk-NUUEMKO5-DLYl0X4S.js";import{ae as D,ai as l}from"./index-CA9KK2lV.js";import{F as b,b as d,D as v,a as c}from"./Feedback-oujG440w.js";import{D as u}from"./DocsCanvas-Bqew-jOy.js";import{u as g}from"./use-disclosure-CdGn7wGE.js";import{B as k}from"./Button-EXIhltg2.js";import{D as y,a as O}from"./drawer-content-BvcegRQO.js";import{M as C,a as P,b as B}from"./modal-overlay-BlwCg4fM.js";import{T as w}from"./text-D14Jyc6W.js";import{T as p,a,b as h,c as s,d as t,e as j,f as n}from"./tr-B1Ot1Dcr.js";import"./index-BwDkhjyp.js";import"./_commonjsHelpers-BosuxZz1.js";import"./iframe-es2cHBvO.js";import"../sb-preview/runtime.js";import"./react-18-CyFAdspd.js";import"./index-CS4BWtGh.js";import"./index-D-8MO0q_.js";import"./assertThisInitialized-DSoh8oXT.js";import"./inheritsLoose-B6jfs0L0.js";import"./setPrototypeOf-DgZC2w_0.js";import"./index-DF3CPj03.js";import"./index-DrFu-skq.js";import"./box-CwIaBbUI.js";import"./factory-DBKMNJMh.js";import"./emotion-styled.browser.esm-KUABWefE.js";import"./emotion-element-5486c51c.browser.esm-xLAo67gU.js";import"./image-GsZWH-VT.js";import"./forward-ref-BWI-Phbn.js";import"./use-image-rNdzB_Ea.js";import"./use-safe-layout-effect-BnICyLBj.js";import"./omit-QLD0Eizt.js";import"./simple-grid-ZnRIKZLi.js";import"./grid-BNFEBO0r.js";import"./use-theme-CeOC8r1f.js";import"./hooks-Dk7VeZ_r.js";import"./responsive-CwLgsqRj.js";import"./heading-05dRngNe.js";import"./use-style-config-B2siLCbt.js";import"./index-CfyPTyT-.js";import"./cx-BDMMs1jM.js";import"./Card-jUBPBQ-A.js";import"./providers-BmY41TRh.js";import"./emotion-react.browser.esm-0Zac8NuU.js";import"./context-CBKykClo.js";import"./calc-C4XOv3Qc.js";import"./css-var-DE0-P1bc.js";import"./pick-DBnSFT3T.js";import"./flex-v5DFvFs4.js";import"./Link-D6DR4S49.js";import"./stack-BdCvkUuU.js";import"./children-2ZXUntH3.js";import"./use-callback-ref-DA6UG1mJ.js";import"./button-CcUc8H6T.js";import"./spinner-CI5qPk1o.js";import"./define-styles-BSAHv3yx.js";import"./use-merge-refs-Bdxaq0s4.js";import"./attr-sHTFgF0E.js";import"./center-Ds0pdlwh.js";import"./h-stack-DtOTlfD9.js";import"./Icon-BuKetNiF.js";/* empty css              */import"./slide-D-toIuQT.js";import"./transition-utils-CnxNY5SP.js";import"./index-BMuBlvl2.js";import"./proxy-NyFW0ziH.js";import"./Combination-DhNDPOzd.js";import"./defineProperty-BylEvKcw.js";import"./focusable-crJ8ziAt.js";import"./is-element-C52yPwBl.js";import"./call-all-DDzecCnU.js";import"./portal-BlJtTGys.js";import"./fade-Bhr0Adt1.js";const T=()=>{const{isOpen:o,onOpen:r,onClose:i}=g();return e.jsxs(u,{children:[e.jsx(k,{onClick:r,children:"Open Drawer"}),e.jsxs(y,{placement:"right",onClose:i,isOpen:o,children:[e.jsx(C,{}),e.jsxs(O,{children:[e.jsx(P,{borderBottomWidth:"1px",children:"Basic Drawer"}),e.jsxs(B,{children:[e.jsx("p",{children:"Some contents..."}),e.jsx("p",{children:"Some contents..."}),e.jsx("p",{children:"Some contents..."})]})]})]})]})},M=()=>{const{getDisclosureProps:o,getButtonProps:r}=g(),i=r(),f=o();return e.jsxs(u,{children:[e.jsx(k,{...i,children:"Toggle Me"}),e.jsxs(w,{...f,mt:4,children:["This text is being visibly toggled hidden and shown by the button.",e.jsx("br",{}),"(Inspect these components to see the rendered attributes)"]})]})},S=`function Example() {
  const { isOpen, onOpen, onClose } = useDisclosure()

  return (
    <>
      <Button onClick={onOpen}>Open Drawer</Button>
      <Drawer placement='right' onClose={onClose} isOpen={isOpen}>
        <DrawerOverlay />
        <DrawerContent>
          <DrawerHeader borderBottomWidth='1px'>Basic Drawer</DrawerHeader>
          <DrawerBody>
            <p>Some contents...</p>
            <p>Some contents...</p>
            <p>Some contents...</p>
          </DrawerBody>
        </DrawerContent>
      </Drawer>
    </>
  )
}`,H=`function Basic() {
  const { getDisclosureProps, getButtonProps } = useDisclosure()

  const buttonProps = getButtonProps()
  const disclosureProps = getDisclosureProps()
  return (
    <>
      <Button {...buttonProps}>Toggle Me</Button>
      <Text {...disclosureProps} mt={4}>
        This text is being visibly toggled hidden and shown by the button.
        <br />
        (Inspect these components to see the rendered attributes)
      </Text>
    </>
  )
}`;function x(o){const r={code:"code",h1:"h1",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...m(),...o.components};return e.jsxs(e.Fragment,{children:[e.jsx(D,{title:"Komponenter/Hooks/useDisclosure"}),`
`,e.jsx(r.h1,{id:"usedisclosure",children:"useDisclosure"}),`
`,e.jsxs(r.p,{children:[e.jsx(r.strong,{children:"useDisclosure"})," er en tilpasset hook som brukes for å hjelpe med å håndtere vanlige ",e.jsx(r.strong,{children:"open"}),", ",e.jsx(r.strong,{children:"close"})," eller ",e.jsx(r.strong,{children:"toggle"}),". Den kan brukes til å kontrollere tilbakemeldingskomponenter som ",e.jsx(r.strong,{children:"Modal"}),", ",e.jsx(r.strong,{children:"AlertDialog"}),", ",e.jsx(r.strong,{children:"Drawer"}),", osv."]}),`
`,e.jsx(r.pre,{children:e.jsx(r.code,{className:"language-jsx",children:`import { useDisclosure } from "@kvib/react";
`})}),`
`,e.jsx(b,{component:"useDisclosure"}),`
`,e.jsx(d,{light:!0,children:"Return value"}),`
`,e.jsxs(r.p,{children:[e.jsx(r.strong,{children:"useDisclosure"})," hook returnerer et objekt med følgende felter:"]}),`
`,e.jsx(p,{children:e.jsxs(a,{children:[e.jsx(h,{children:e.jsxs(s,{children:[e.jsx(t,{children:"Name"}),e.jsx(t,{children:"Type"}),e.jsx(t,{children:"Default"}),e.jsx(t,{children:"Description"})]})}),e.jsxs(j,{children:[e.jsxs(s,{children:[e.jsx(n,{children:e.jsx("code",{children:"isOpen"})}),e.jsx(n,{children:e.jsx("code",{children:"boolean"})}),e.jsx(n,{children:e.jsx("code",{children:"false"})}),e.jsxs(n,{children:["Hvis ",e.jsx(r.strong,{children:"true"}),", setter det den kontrollerte komponenten til sin synlige tilstand."]})]}),e.jsxs(s,{children:[e.jsx(n,{children:e.jsx("code",{children:"onClose"})}),e.jsx(n,{children:e.jsx("code",{children:"function"})}),e.jsx(n,{children:e.jsx("code",{})}),e.jsxs(n,{children:["Callback-funksjon for å sette ",e.jsx(r.strong,{children:"isOpen"}),"-parameteren til false."]})]}),e.jsxs(s,{children:[e.jsx(n,{children:e.jsx("code",{children:"onOpen"})}),e.jsx(n,{children:e.jsx("code",{children:"function"})}),e.jsx(n,{children:e.jsx("code",{})}),e.jsxs(n,{children:["Callback-funksjon for å sette ",e.jsx(r.strong,{children:"isOpen"}),"-parameteren til true."]})]}),e.jsxs(s,{children:[e.jsx(n,{children:e.jsx("code",{children:"onToggle"})}),e.jsx(n,{children:e.jsx("code",{children:"function"})}),e.jsx(n,{children:e.jsx("code",{})}),e.jsxs(n,{children:["Callback-funksjon for å bytte verdien av ",e.jsx(r.strong,{children:"isOpen"}),"-parameteren."]})]}),e.jsxs(s,{children:[e.jsx(n,{children:e.jsx("code",{children:"getDisclosureProps"})}),e.jsx(n,{children:e.jsx("code",{children:"function"})}),e.jsx(n,{children:e.jsx("code",{})}),e.jsx(n,{children:"Callback-funksjon for å hente en rekke egenskaper (props) for den kontrollerte komponenten."})]}),e.jsxs(s,{children:[e.jsx(n,{children:e.jsx("code",{children:"getButtonProps"})}),e.jsx(n,{children:e.jsx("code",{children:"function"})}),e.jsx(n,{children:e.jsx("code",{})}),e.jsx(n,{children:"Callback-funksjon for å hente en rekke egenskaper (props) for knappen som utløser visningen (disclosure)."})]})]})]})}),`
`,e.jsxs(v,{children:[e.jsx(c,{title:"Bruk",description:`Du kan bruke en kombinasjon av metodene og verdiene som returneres av hooken for å styre ulike komponenter påvirket av avsløringen.
Nedenfor er bruken av returnerte felt fra hooken uten en hentefunksjon for å styre Drawer-komponenten ved knappetoggling.`,story:e.jsx(T,{})}),e.jsx(l,{code:S,dark:!0}),e.jsxs(r.p,{children:["Ved å bruke metodene ",e.jsx(r.strong,{children:"getDisclosureProps"})," og ",e.jsx(r.strong,{children:"getButtonProps"})," som returneres av hooken, får du nødvendige attributter og hendler til den respektive komponenten og knappen for synlighetstoggling og tilgjengelighet."]}),e.jsxs(r.p,{children:["Komponenten som bruker ",e.jsx(r.strong,{children:"getDisclosureProps"})," mottar følgende egenskaper (props):"]}),e.jsxs(r.ul,{children:[`
`,e.jsxs(r.li,{children:["En ",e.jsx(r.strong,{children:"id"})," (kan valgfritt passere denne som en prop til hooken for å rendere en tilpasset verdi)."]}),`
`,e.jsxs(r.li,{children:["Et dynamisk rendret ",e.jsx(r.strong,{children:"hidden"}),` attributt.
`,e.jsx(r.strong,{children:"getDisclosureProps"}),' kan direkte akseptere eventuelle ekstra props for komponenten."']}),`
`]}),e.jsxs(r.p,{children:["Knappen som bruker ",e.jsx(r.strong,{children:"getButtonProps"})," for toggling mottar følgende egenskaper (props):"]}),e.jsxs(r.ul,{children:[`
`,e.jsxs(r.li,{children:["Dynamisk rendret ",e.jsx(r.strong,{children:"aria-expanded"})," attributt for å informere en skjermleser om hvorvidt avsløringskomponenten er synlig."]}),`
`,e.jsxs(r.li,{children:[e.jsx(r.strong,{children:"aria-controls"})," attributtet bruker ",e.jsx(r.strong,{children:"id"})," (kan valgfritt passere ",e.jsx(r.strong,{children:"id"})," som en prop til hooken for å rendere en tilpasset verdi). Dette forteller en skjermleser hvilken komponent som kontrolleres av knappen."]}),`
`,e.jsxs(r.li,{children:["En onClick-handler som bruker ",e.jsx(r.strong,{children:"onToggle"})," callback sammen med eventuelle andre click events som passerer som en ",e.jsx(r.strong,{children:"onClick"}),"-prop til ",e.jsx(r.strong,{children:"getButtonProps"}),"."]}),`
`]}),e.jsx(c,{title:"",description:"getButtonProps kan også direkte akseptere eventuelle ekstra props for knappen.",story:e.jsx(M,{})}),e.jsx(l,{code:H,dark:!0})]}),`
`,e.jsxs(r.p,{children:[e.jsx(d,{light:!0,children:"Parametere"}),`
`,e.jsx(r.strong,{children:"useDisclosure"})," hooken aksepterer et valgfritt objekt med følgende egenskaper:"]}),`
`,e.jsx(p,{children:e.jsxs(a,{children:[e.jsx(h,{children:e.jsxs(s,{children:[e.jsx(t,{children:"Parameter"}),e.jsx(t,{children:"Type"}),e.jsx(t,{children:"Description"})]})}),e.jsxs(j,{children:[e.jsxs(s,{children:[e.jsx(n,{children:e.jsx("code",{children:"isOpen (Optional)"})}),e.jsx(n,{children:e.jsx("code",{children:"boolean"})}),e.jsx(n,{children:"Hvis true, er den kontrollerte komponenten ansvarlig for å endre synlighetstilstanden via onClose- og onOpen-egenskapene."})]}),e.jsxs(s,{children:[e.jsx(n,{children:e.jsx("code",{children:"defaultIsOpen (Optional)"})}),e.jsx(n,{children:e.jsx("code",{children:"boolean"})}),e.jsx(n,{children:"Hvis true, setter initialt den kontrollerte komponenten til sin synlige tilstand."})]}),e.jsxs(s,{children:[e.jsx(n,{children:e.jsx("code",{children:"onClose (Optional)"})}),e.jsx(n,{children:e.jsx("code",{children:"function"})}),e.jsx(n,{children:"Funksjon for å sette isOpen-parameteren til false."})]}),e.jsxs(s,{children:[e.jsx(n,{children:e.jsx("code",{children:"onOpen (Optional)"})}),e.jsx(n,{children:e.jsx("code",{children:"function"})}),e.jsx(n,{children:"Funksjon for å sette isOpen-parameteren til true."})]}),e.jsxs(s,{children:[e.jsx(n,{children:e.jsx("code",{children:"id (Optional)"})}),e.jsx(n,{children:e.jsx("code",{children:"string"})}),e.jsx(n,{children:"Streng som lar deg knytte avsløringsstatusen til en bestemt komponent eller element på siden din."})]})]})]})})]})}function $e(o={}){const{wrapper:r}={...m(),...o.components};return r?e.jsx(r,{...o,children:e.jsx(x,{...o})}):x(o)}export{$e as default};
