const n=()=>(e,a)=>a.reduce((t,o)=>{const[i,c]=t,s=o;return c[s]!==void 0&&(i[s]=c[s]),delete c[s],[i,c]},[{},{...e}]);var d=(e,a=[])=>({parts:(...t)=>{if(l(a))return d(e,t);throw new Error("createAnatomy().parts(...) should only be called once. Did you mean to use .extendWith(...) ?")},extendWith:(...t)=>d(e,[...a,...t]),omit:(...t)=>d(e,a.filter(o=>!t.includes(o))),rename:t=>d(t,a),keys:()=>a,build:()=>[...new Set(a)].reduce((t,o)=>Object.assign(t,{[o]:{selector:[`&[data-scope="${r(e)}"][data-part="${r(o)}"]`,`& [data-scope="${r(e)}"][data-part="${r(o)}"]`].join(", "),attrs:{"data-scope":r(e),"data-part":r(o)}}}),{})}),r=e=>e.replace(/([A-Z])([A-Z])/g,"$1-$2").replace(/([a-z])([A-Z])/g,"$1-$2").replace(/[\s_]+/g,"-").toLowerCase(),l=e=>e.length===0;export{n as a,d as c};
