import{j as e}from"./extends-CwFRzn3r.js";import{r as b}from"./index-BwDkhjyp.js";import{M as j}from"./chunk-EL2VKIZQ-CR2cgERt.js";import{c as C,M as y,a as g,b as v}from"./chunk-OFOVX77R-4PKM3lTH.js";import{f as O}from"./chunk-ZJJGQIVY-CoI1iMVy.js";import{a as x,M as I}from"./chunk-4FCEGNGT-BzgWbZwh.js";import{u as k}from"./chunk-7JBTTEVG-DuShY1Xb.js";import{B as l}from"./Button-BTrFsz-j.js";function c(o){const{leastDestructiveRef:t,...a}=o;return e.jsx(C,{...a,initialFocusRef:t})}var w=O((o,t)=>e.jsx(j,{ref:t,role:"alertdialog",...o}));const A={title:"Overlay/Alert Dialog",component:c,parameters:{docs:{story:{inline:!0},canvas:{sourceState:"shown"}}},argTypes:{isOpen:{required:!0,description:"If true, the modal will be open.",table:{type:{summary:"boolean"}},control:"boolean"},leastDestructiveRef:{required:!0,table:{type:{summary:"RefObject<FocusableElement>"}},control:"object"},onClose:{required:!0,description:"Callback invoked to close the modal.",table:{type:{summary:"() => void"}},control:"function"},allowPinchZoom:{description:"Handle zoom/pinch gestures on iOS devices when scroll locking is enabled.",table:{type:{summary:"boolean"},defaultValue:{summary:"false"}},control:"boolean"},autoFocus:{description:"If true, the modal will autofocus the first enabled and interactive element within the ModalContent",table:{type:{summary:"boolean"},defaultValue:{summary:"true"}},control:"boolean"},blockScrollOnMount:{description:"If true, scrolling will be disabled on the body when the modal opens.",table:{type:{summary:"boolean"},defaultValue:{summary:"true"}},control:"boolean"},closeOnEsc:{description:"If true, the modal will close when the Esc key is pressed",table:{type:{summary:"boolean"},defaultValue:{summary:"true"}},control:"boolean"},closeOnOverlayClick:{description:"If true, the modal will close when the overlay is clicked",table:{type:{summary:"boolean"},defaultValue:{summary:"true"}},control:"boolean"},finalFocusRef:{description:"The ref of element to receive focus when the modal closes.",table:{type:{summary:"RefObject<FocusableElement>"}},control:"object"},id:{description:"The id of the modal",table:{type:{summary:"string"}},control:"text"},isCentered:{description:"If true, the modal will be centered on screen.",table:{type:{summary:"boolean"},defaultValue:{summary:"false"}},control:"boolean"},lockFocusAcrossFrames:{description:"Enables aggressive focus capturing within iframes. - If true: keep focus in the lock, no matter where lock is active - If false: allows focus to move outside of iframe",table:{type:{summary:"boolean"},defaultValue:{summary:"false"}},control:"boolean"},motionPreset:{description:"The transition that should be used for the modal",table:{type:{summary:"MotionPreset"},defaultValue:{summary:"scale"}},control:"text"},onCloseComplete:{description:"Fires when all exiting nodes have completed animating out",table:{type:{summary:"() => void"}},control:"function"},onEsc:{description:"Callback fired when the escape key is pressed and focus is within modal",table:{type:{summary:"() => void"}},control:"function"},onOverlayClick:{description:"Callback fired when the overlay is clicked.",table:{type:{summary:"() => void"}},control:"function"},portalProps:{description:"Props to be forwarded to the portal component",table:{type:{summary:"Pick< PortalProps, 'appendToParentPortal' | 'containerRef' >"}},control:"object"},preserveScrollBarGap:{description:"If true, a `padding-right` will be applied to the body element that's equal to the width of the scrollbar. This can help prevent some unpleasant flickering effect and content adjustment when the modal opens",table:{type:{summary:"boolean"},defaultValue:{summary:"true"}},control:"boolean"},returnFocusOnClose:{description:"If true, the modal will return focus to the element that triggered it when it closes.",table:{type:{summary:"boolean"},defaultValue:{summary:"true"}},control:"boolean"},scrollBehavior:{description:"Where scroll behavior should originate. - If set to inside, scroll only occurs within the ModalBody. - If set to outside, the entire ModalContent will scroll within the viewport.",table:{type:{summary:"ScrollBehavior"},defaultValue:{summary:"outside"}},control:"text"},trapFocus:{description:"If false, focus lock will be disabled completely. This is useful in situations where you still need to interact with other surrounding elements. ðŸš¨Warning: We don't recommend doing this because it hurts the accessibility of the modal, based on WAI-ARIA specifications.",table:{type:{summary:"boolean"},defaultValue:{summary:"true"}},control:"boolean"},useInert:{description:"A11y: If true, the siblings of the modal will have `aria-hidden` set to true so that screen readers can only see the modal. This is commonly known as making the other elements **inert**",table:{type:{summary:"boolean"},defaultValue:{summary:"true"}},control:"boolean"}},args:{onClose:void 0,onCloseComplete:void 0,onEsc:void 0,onOverlayClick:void 0}},S=({...o})=>{const{isOpen:t,onOpen:a,onClose:r}=k(),s=b.useRef(null);return e.jsxs(e.Fragment,{children:[e.jsx(l,{colorScheme:"red",onClick:a,children:"Slett"}),e.jsx(c,{...o,isOpen:t,leastDestructiveRef:s,onClose:r,children:e.jsx(y,{children:e.jsxs(w,{children:[e.jsx(g,{fontSize:"lg",fontWeight:"bold",children:"Slett"}),e.jsx(v,{children:"Er du sikker? Du kan ikke angre senere."}),e.jsxs(x,{children:[e.jsx(l,{ref:s,onClick:r,children:"Avbryt"}),e.jsx(l,{colorScheme:"red",onClick:r,ml:3,children:"Slett"})]})]})})})]})},n={args:{},render:o=>e.jsx(S,{...o})},D=({...o})=>{const{isOpen:t,onOpen:a,onClose:r}=k(),s=b.useRef(null);return e.jsxs(e.Fragment,{children:[e.jsx(l,{onClick:a,children:"Forkast endringer"}),e.jsxs(c,{...o,motionPreset:"slideInBottom",leastDestructiveRef:s,onClose:r,isOpen:t,isCentered:!0,children:[e.jsx(y,{}),e.jsxs(w,{children:[e.jsx(g,{children:"Forkast endringer?"}),e.jsx(I,{}),e.jsx(v,{children:"Er du sikker pÃ¥ at du vil forkaste notatene? 44 ord vil bli slettet."}),e.jsxs(x,{children:[e.jsx(l,{ref:s,onClick:r,children:"Nei"}),e.jsx(l,{colorScheme:"red",ml:3,children:"Ja"})]})]})]})]})},i={args:{},render:o=>e.jsx(D,{...o})};var d,u,m;n.parameters={...n.parameters,docs:{...(d=n.parameters)==null?void 0:d.docs,source:{originalSource:`{
  args: {},
  render: args => <AlertDialogExample {...args} />
}`,...(m=(u=n.parameters)==null?void 0:u.docs)==null?void 0:m.source}}};var p,h,f;i.parameters={...i.parameters,docs:{...(p=i.parameters)==null?void 0:p.docs,source:{originalSource:`{
  args: {},
  render: args => <TransitionExample {...args} />
}`,...(f=(h=i.parameters)==null?void 0:h.docs)==null?void 0:f.source}}};const E=["AlertDialog","AlertDialogTransition"],W=Object.freeze(Object.defineProperty({__proto__:null,AlertDialog:n,AlertDialogTransition:i,__namedExportsOrder:E,default:A},Symbol.toStringTag,{value:"Module"}));export{W as A,i as a,n as b};
